//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `primaryColor`.
    static let primaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryColor")
    
    /// `UIColor(named: "primaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryColor, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `HighAmelliya`.
    static let highAmelliya = Rswift.FontResource(fontName: "HighAmelliya")
    
    /// `UIFont(name: "HighAmelliya", size: ...)`
    static func highAmelliya(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: highAmelliya, size: size)
    }
    
    static func validate() throws {
      if R.font.highAmelliya(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HighAmelliya' could not be loaded, is 'High-Amelliya.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `imagen2`.
    static let imagen2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "imagen2")
    
    /// `UIImage(named: "imagen2", bundle: ..., traitCollection: ...)`
    static func imagen2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imagen2, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `CustomView`.
    static let customView = _R.nib._CustomView()
    
    /// `UINib(name: "CustomView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customView) instead")
    static func customView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customView)
    }
    
    static func customView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomView? {
      return R.nib.customView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ViewController`, and contains static references to 1 segues.
    struct viewController {
      /// Segue identifier `showSecond`.
      static let showSecond: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, ViewController1> = Rswift.StoryboardSegueIdentifier(identifier: "showSecond")
      
      /// Optionally returns a typed version of segue `showSecond`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSecond(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, ViewController1>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.showSecond, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.main` struct is generated, and contains static references to 3 localization keys.
    struct main {
      /// en translation: Label
      /// 
      /// Locales: en
      static let nraRD8krText = Rswift.StringResource(key: "nra-RD-8kr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en
      static let rFE1zDawText = Rswift.StringResource(key: "rFE-1z-daw.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Label
      /// 
      /// Locales: en
      static let tObNPQkJText = Rswift.StringResource(key: "tOb-NP-qkJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Label
      /// 
      /// Locales: en
      static func nraRD8krText(_: Void = ()) -> String {
        return NSLocalizedString("nra-RD-8kr.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en
      static func rFE1zDawText(_: Void = ()) -> String {
        return NSLocalizedString("rFE-1z-daw.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Label
      /// 
      /// Locales: en
      static func tObNPQkJText(_: Void = ()) -> String {
        return NSLocalizedString("tOb-NP-qkJ.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.strings` struct is generated, and contains static references to 4 localization keys.
    struct strings {
      /// en translation: 
      /// 
      /// Locales: en
      static let mensajeerror = Rswift.StringResource(key: "mensajeerror", tableName: "Strings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: HOLa
      /// 
      /// Locales: en
      static let nraRD8krText = Rswift.StringResource(key: "nra-RD-8kr.text", tableName: "Strings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Segundo titulo
      /// 
      /// Locales: en
      static let secondTitle = Rswift.StringResource(key: "secondTitle", tableName: "Strings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Titulo inicial
      /// 
      /// Locales: en
      static let firstTitle = Rswift.StringResource(key: "firstTitle", tableName: "Strings", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: 
      /// 
      /// Locales: en
      static func mensajeerror(_: Void = ()) -> String {
        return NSLocalizedString("mensajeerror", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: HOLa
      /// 
      /// Locales: en
      static func nraRD8krText(_: Void = ()) -> String {
        return NSLocalizedString("nra-RD-8kr.text", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Segundo titulo
      /// 
      /// Locales: en
      static func secondTitle(_: Void = ()) -> String {
        return NSLocalizedString("secondTitle", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Titulo inicial
      /// 
      /// Locales: en
      static func firstTitle(_: Void = ()) -> String {
        return NSLocalizedString("firstTitle", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _CustomView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
